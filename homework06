#pragma once
namespace ext {
	using charArray = char*;
	int countLength(charArray str) {
		int length = 0;
		while (str[length] != '\0') {
			++length;
		}
		return length;
	}
	char characterAt(charArray array, int number) {
		return array[number - 1];
	}
	void append(charArray & array, char symbol) {
		int lenght = countLength(array) + 2;
		charArray str = new char[lenght];
		str[lenght - 2] = symbol;
		str[lenght - 1] = '\0';
		for (int i = 0; i < lenght - 2; i++) {
			str[i] = array[i];
		}
		delete[] array;
		array = str;
	}
	void concatenate(charArray & first, charArray second) {
		int lenghtOfFirst = countLength(first);
		int lenghtOfSecond = countLength(second);
		int lenght = lenghtOfFirst + lenghtOfSecond;
		int counter = 0;
		charArray str = new char[lenght + 1];
		for (int i = 0; i < lenght; i++) {
			if (i > lenghtOfFirst - 1) {
				counter = i - lenghtOfFirst;
				str[i] = second[counter];
			}
			else {
				str[i] = first[i];
			}
		}
		str[lenght] = '\0';
		delete[] first;
		first = str;
	}
	charArray substr(charArray & array, int startPosition, int lenght) {
		charArray str = new char[lenght + 1];
		int counter = 0;
		int lenghtOfFor = countLength(array);
		for (int i = 0; i < lenghtOfFor; i++) {
			if ((i >= startPosition - 1) && (counter < lenght)) {
				str[counter] = array[i];
				counter += 1;
			}
		}
		str[lenght] = '\0';
		return str;
	}
	int countStrings(charArray str) {
		int length = 0;
		while (str[length] != '\0') {
			++length;
		}
		return length;
	}
	void replaceString(charArray & string, charArray seek, charArray replace) {
		int lenght = countLength(string), counter = 0, lenghtOfReplace = countLength(replace), lenghtOfSeek = countLength(seek), counterOfStrings = 0, AddedLetters = 0;
		for (int i = 0; i < lenght; i++) {
			if (string[i] == seek[counter]) {
				counter += 1;
			}
			if (counter == lenghtOfSeek) {
				counterOfStrings += 1;
				counter = 0;
			}
		}
		counter = 0;
		int lenghtOfAns = lenght - (lenghtOfSeek * counterOfStrings) + (lenghtOfReplace * counterOfStrings) - 2;
		charArray str = new char[lenghtOfAns];
		for (int i = 0; i < lenghtOfAns; i++) {
			if (string[i] == seek[counter]) {
				counter += 1;
			}
			else {
				if (counter > 0) {
					for (int j = 0; j < counter; j++) {
						str[i + AddedLetters - counter + j] = string[i - counter + j];
					}
				}
				str[i + AddedLetters] = string[i];
				counter = 0;
			}
			if (counter == lenghtOfSeek) {
				for (int j = 0; j < lenghtOfReplace; j++) {
					str[i - counter + j + 1 + AddedLetters] = replace[j];
				}
				counter = 0;
				AddedLetters += lenghtOfReplace - 2;
			}
		}
		delete[] string;
		string = str;
	}
}
